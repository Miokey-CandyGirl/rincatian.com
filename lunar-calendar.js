// 农历和节气计算工具函数

/**
 * 农历和节气工具类
 */
class LunarCalendar {
    /**
     * 农历数据表（1900-2100年）
     * 格式：[0] = 闰月月份（0表示无闰月），[1-12] = 每月天数（大月30天，小月29天）
     */
static LUNAR_DATA = {
    // [0/1, 月1天数, 月2天数, ..., 月12天数] 或 [0/1, 月1天数, 月2天数, ..., 月13天数]
    // 0表示无闰月，1表示有闰月
    1900: [0, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30, 30],
    1901: [0, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29],
    1902: [0, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 30, 29],
    1903: [1, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 30, 30, 29],
    1904: [0, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30],
    1905: [1, 29, 29, 30, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30],
    1906: [0, 29, 30, 29, 30, 30, 29, 30, 29, 29, 30, 29, 30],
    1907: [0, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29, 30],
    1908: [1, 29, 30, 29, 29, 30, 29, 30, 30, 29, 30, 30, 29, 30],
    1909: [0, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 30],
    1910: [0, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30],
    1911: [1, 29, 29, 30, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30],
    1912: [0, 29, 30, 29, 30, 30, 29, 30, 29, 29, 30, 29, 30],
    1913: [0, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29, 30],
    1914: [1, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 30, 29, 30],
    1915: [0, 29, 29, 30, 30, 29, 29, 30, 29, 30, 30, 30, 29],
    1916: [1, 29, 30, 30, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30],
    1917: [0, 29, 29, 30, 29, 30, 29, 30, 29, 29, 30, 30, 29],
    1918: [0, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29],
    1919: [1, 29, 29, 30, 29, 30, 29, 30, 30, 29, 30, 30, 29, 30],
    1920: [0, 29, 30, 29, 29, 30, 29, 30, 30, 29, 30, 30, 30],
    1921: [0, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 30],
    1922: [1, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29],
    1923: [0, 29, 29, 30, 30, 29, 30, 29, 29, 30, 29, 30, 29],
    1924: [1, 29, 30, 29, 30, 30, 29, 30, 29, 29, 30, 29, 30, 29],
    1925: [0, 29, 29, 29, 30, 30, 29, 30, 30, 29, 30, 29, 30],
    1926: [0, 29, 30, 29, 29, 30, 29, 30, 30, 29, 30, 30, 29],
    1927: [1, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 30, 29],
    1928: [0, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30],
    1929: [0, 29, 29, 30, 29, 30, 29, 29, 30, 29, 30, 30, 29],
    1930: [1, 29, 30, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29],
    1931: [0, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    1932: [1, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    1933: [0, 29, 29, 30, 29, 30, 30, 29, 30, 29, 30, 29, 30],
    1934: [0, 29, 30, 29, 29, 30, 30, 29, 30, 29, 30, 30, 29],
    1935: [1, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 30, 29],
    1936: [0, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30],
    1937: [0, 29, 29, 30, 29, 30, 29, 29, 30, 29, 30, 30, 29],
    1938: [1, 29, 30, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29],
    1939: [0, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    1940: [1, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    1941: [0, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29],
    1942: [0, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30],
    1943: [0, 29, 29, 30, 29, 30, 29, 29, 30, 29, 30, 30, 29],
    1944: [1, 29, 30, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29],
    1945: [0, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    1946: [1, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    1947: [0, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29],
    1948: [0, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30, 30],
    1949: [0, 29, 29, 30, 29, 30, 29, 29, 30, 29, 30, 30, 30],
    1950: [1, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30, 30, 29],
    1951: [0, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29],
    1952: [1, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30],
    1953: [0, 29, 30, 30, 29, 29, 30, 29, 29, 30, 29, 30, 30],
    1954: [0, 29, 29, 30, 29, 30, 29, 30, 29, 29, 30, 29, 30],
    1955: [1, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    1956: [0, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    1957: [0, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30],
    1958: [1, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29, 30],
    1959: [0, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30],
    1960: [0, 29, 29, 30, 29, 30, 29, 29, 30, 29, 30, 30, 29],
    1961: [1, 29, 30, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29],
    1962: [0, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    1963: [0, 29, 29, 30, 29, 30, 30, 29, 30, 29, 30, 29, 30],
    1964: [1, 29, 30, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29],
    1965: [0, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29],
    1966: [1, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29],
    1967: [0, 29, 29, 30, 29, 30, 29, 29, 30, 29, 30, 30, 29],
    1968: [1, 29, 30, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29],
    1969: [0, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    1970: [0, 29, 29, 30, 29, 30, 30, 29, 30, 29, 30, 29, 30],
    1971: [1, 29, 30, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29],
    1972: [0, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29],
    1973: [1, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29],
    1974: [0, 29, 29, 30, 29, 30, 29, 29, 30, 29, 30, 30, 29],
    1975: [1, 29, 30, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29],
    1976: [0, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    1977: [0, 29, 29, 30, 29, 30, 30, 29, 30, 29, 30, 29, 30],
    1978: [1, 29, 30, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29],
    1979: [0, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29],
    1980: [1, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30],
    1981: [0, 29, 30, 30, 29, 29, 30, 29, 29, 30, 29, 30, 30],
    1982: [0, 29, 29, 30, 29, 30, 29, 30, 29, 29, 30, 29, 30],
    1983: [1, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    1984: [0, 29, 30, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30],
    1985: [0, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29],
    1986: [1, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29],
    1987: [0, 29, 29, 30, 29, 30, 29, 29, 30, 29, 30, 30, 29],
    1988: [1, 29, 30, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29],
    1989: [0, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    1990: [1, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30],
    1991: [0, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    1992: [0, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30],
    1993: [1, 29, 29, 30, 29, 30, 29, 29, 30, 29, 30, 30, 29, 30],
    1994: [0, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30, 30],
    1995: [0, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29],
    1996: [1, 29, 30, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29],
    1997: [0, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    1998: [0, 29, 29, 30, 29, 30, 30, 29, 30, 29, 30, 29, 30],
    1999: [1, 29, 30, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29],
    2000: [0, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29],
    2001: [1, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30],
    2002: [0, 29, 30, 30, 29, 29, 30, 29, 29, 30, 29, 30, 30],
    2003: [0, 29, 29, 30, 29, 30, 29, 30, 29, 29, 30, 29, 30],
    2004: [1, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    2005: [0, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    2006: [0, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30],
    2007: [1, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 30, 29],
    2008: [0, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30, 30],
    2009: [0, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29],
    2010: [1, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30],
    2011: [0, 29, 30, 30, 29, 29, 30, 29, 29, 30, 29, 30, 30],
    2012: [0, 29, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30],
    2013: [1, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    2014: [0, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    2015: [0, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30],
    2016: [1, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29, 30],
    2017: [0, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30],
    2018: [0, 29, 29, 30, 29, 30, 29, 29, 30, 29, 30, 30, 29],
    2019: [1, 29, 30, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29],
    2020: [1, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30],
    2021: [0, 29, 29, 30, 29, 30, 30, 29, 30, 29, 30, 29, 30],
    2022: [1, 29, 30, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29],
    2023: [1, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29, 30],
    2024: [0, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    2025: [0, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 30],
    2026: [1, 29, 30, 29, 29, 30, 29, 30, 29, 29, 30, 29, 30, 30],
    2027: [0, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29, 30],
    2028: [1, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30],
    2029: [0, 29, 29, 30, 29, 30, 29, 29, 30, 29, 30, 30, 29],
    2030: [0, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30, 30],
    2031: [1, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 30, 29],
    2032: [0, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29],
    2033: [0, 29, 30, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30],
    2034: [1, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30],
    2035: [0, 29, 29, 30, 29, 30, 30, 29, 30, 29, 30, 29, 30],
    2036: [1, 29, 30, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29],
    2037: [0, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29],
    2038: [0, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30],
    2039: [0, 29, 29, 30, 29, 30, 29, 29, 30, 29, 30, 30, 29],
    2040: [1, 29, 30, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29],
    2041: [0, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    2042: [0, 29, 29, 30, 29, 30, 30, 29, 30, 29, 30, 29, 30],
    2043: [1, 29, 30, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29],
    2044: [0, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29],
    2045: [1, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30],
    2046: [0, 29, 30, 30, 29, 29, 30, 29, 29, 30, 29, 30, 30],
    2047: [0, 29, 29, 30, 29, 30, 29, 30, 29, 29, 30, 29, 30],
    2048: [1, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    2049: [0, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    2050: [0, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30],
    2051: [1, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 30, 29],
    2052: [0, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30, 30],
    2053: [0, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29],
    2054: [1, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30],
    2055: [0, 29, 30, 30, 29, 29, 30, 29, 29, 30, 29, 30, 30],
    2056: [0, 29, 29, 30, 29, 30, 29, 30, 29, 29, 30, 29, 30],
    2057: [1, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    2058: [0, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    2059: [0, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30],
    2060: [1, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29, 30],
    2061: [0, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30],
    2062: [0, 29, 29, 30, 29, 30, 29, 29, 30, 29, 30, 30, 29],
    2063: [1, 29, 30, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29],
    2064: [0, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    2065: [0, 29, 29, 30, 29, 30, 30, 29, 30, 29, 30, 29, 30],
    2066: [1, 29, 30, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29],
    2067: [0, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29],
    2068: [1, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30],
    2069: [0, 29, 30, 30, 29, 29, 30, 29, 29, 30, 29, 30, 30],
    2070: [0, 29, 29, 30, 29, 30, 29, 30, 29, 29, 30, 29, 30],
    2071: [1, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    2072: [0, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    2073: [0, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30],
    2074: [1, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29, 30],
    2075: [0, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30],
    2076: [0, 29, 29, 30, 29, 30, 29, 29, 30, 29, 30, 30, 29],
    2077: [1, 29, 30, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29],
    2078: [0, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    2079: [0, 29, 29, 30, 29, 30, 30, 29, 30, 29, 30, 29, 30],
    2080: [1, 29, 30, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29],
    2081: [0, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29],
    2082: [1, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30],
    2083: [0, 29, 30, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30],
    2084: [0, 29, 29, 30, 29, 30, 29, 30, 29, 29, 30, 29, 30],
    2085: [1, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    2086: [0, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    2087: [0, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30],
    2088: [1, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 30, 29],
    2089: [0, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30],
    2090: [0, 29, 29, 30, 29, 30, 29, 29, 30, 29, 30, 30, 29],
    2091: [1, 29, 30, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29],
    2092: [0, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    2093: [0, 29, 29, 30, 29, 30, 30, 29, 30, 29, 30, 29, 30],
    2094: [1, 29, 30, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29],
    2095: [0, 29, 29, 30, 29, 29, 30, 29, 30, 29, 30, 30, 29],
    2096: [1, 29, 30, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30],
    2097: [0, 29, 30, 30, 29, 29, 30, 29, 29, 30, 29, 30, 30],
    2098: [0, 29, 29, 30, 29, 30, 29, 30, 29, 29, 30, 29, 30],
    2099: [1, 29, 29, 30, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29],
    2100: [0, 29, 30, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29]
};
    /**
     * 节气数据（每月两个节气，从立春开始）
     * 格式：[月, 日]，表示该节气在公历的月日
     */
    static SOLAR_TERMS = [
        [2, 4], [2, 19], [3, 6], [3, 21], [4, 5], [4, 20],
        [5, 6], [5, 21], [6, 6], [6, 22], [7, 7], [7, 23],
        [8, 8], [8, 23], [9, 8], [9, 23], [10, 8], [10, 24],
        [11, 8], [11, 22], [12, 7], [12, 22], [1, 6], [1, 20]
    ];

    /**
     * 节气名称
     */
    static SOLAR_TERM_NAMES = [
        "立春", "雨水", "惊蛰", "春分", "清明", "谷雨",
        "立夏", "小满", "芒种", "夏至", "小暑", "大暑",
        "立秋", "处暑", "白露", "秋分", "寒露", "霜降",
        "立冬", "小雪", "大雪", "冬至", "小寒", "大寒"
    ];

    /**
     * 农历月份名称
     */
    static LUNAR_MONTH_NAMES = [
        "", "正月", "二月", "三月", "四月", "五月", "六月",
        "七月", "八月", "九月", "十月", "冬月", "腊月"
    ];

    /**
     * 农历日期名称
     */
    static LUNAR_DAY_NAMES = [
        "", "初一", "初二", "初三", "初四", "初五", "初六", "初七", "初八", "初九", "初十",
        "十一", "十二", "十三", "十四", "十五", "十六", "十七", "十八", "十九", "二十",
        "廿一", "廿二", "廿三", "廿四", "廿五", "廿六", "廿七", "廿八", "廿九", "三十"
    ];

    /**
     * 天干地支 - 天干
     */
    static HEAVENLY_STEMS = ["甲", "乙", "丙", "丁", "戊", "己", "庚", "辛", "壬", "癸"];

    /**
     * 天干地支 - 地支
     */
    static EARTHLY_BRANCHES = ["子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥"];

    /**
     * 生肖
     */
    static ZODIAC_ANIMALS = ["鼠", "牛", "虎", "兔", "龙", "蛇", "马", "羊", "猴", "鸡", "狗", "猪"];

    /**
     * 常见农历节日
     */
    static LUNAR_FESTIVALS = {
        "1-1": { name: "春节", desc: "农历新年，最重要的传统节日" },
        "1-15": { name: "元宵节", desc: "农历正月十五，赏花灯、吃汤圆" },
        "2-2": { name: "龙抬头", desc: "农历二月初二，传统民俗节日" },
        "3-3": { name: "上巳节", desc: "农历三月初三，古代情人节" },
        "5-5": { name: "端午节", desc: "农历五月初五，纪念屈原，吃粽子" },
        "7-7": { name: "七夕节", desc: "农历七月初七，中国情人节" },
        "7-15": { name: "中元节", desc: "农历七月十五，祭祀祖先" },
        "8-15": { name: "中秋节", desc: "农历八月十五，赏月、吃月饼" },
        "9-9": { name: "重阳节", desc: "农历九月初九，登高、赏菊" },
        "12-8": { name: "腊八节", desc: "农历十二月初八，喝腊八粥" },
        "12-23": { name: "小年", desc: "农历十二月廿三，祭灶王爷" },
        "12-30": { name: "除夕", desc: "农历十二月最后一天，辞旧迎新" }
    };

    /**
     * 公历节日（中国、日韩和西方节日）
     */
    static SOLAR_FESTIVALS = {
        // 中国节日
        "1-1": { name: "元旦", desc: "公历新年" },
        "2-14": { name: "情人节", desc: "西方情人节" },
        "3-8": { name: "妇女节", desc: "国际妇女节" },
        "3-12": { name: "植树节", desc: "中国植树节" },
        "4-1": { name: "愚人节", desc: "西方愚人节" },
        "5-1": { name: "劳动节", desc: "国际劳动节" },
        "5-4": { name: "青年节", desc: "中国青年节" },
        "6-1": { name: "儿童节", desc: "国际儿童节" },
        "7-1": { name: "建党节", desc: "中国共产党成立纪念日" },
        "8-1": { name: "建军节", desc: "中国人民解放军建军节" },
        "9-10": { name: "教师节", desc: "中国教师节" },
        "10-1": { name: "国庆节", desc: "中华人民共和国国庆节" },
        "12-25": { name: "圣诞节", desc: "西方圣诞节" },
        
        // 日韩节日
        "3-3": { name: "女儿节", desc: "日本女儿节（雏祭）" },
        "5-5": { name: "儿童节", desc: "日本儿童节（端午节）" },
        "7-7": { name: "七夕节", desc: "日本七夕节" },
        "8-15": { name: "中秋节", desc: "韩国中秋节（秋夕）" },
        "11-15": { name: "文化节", desc: "韩国文化节" },
        
        // 西方节日
        "2-2": { name: "土拨鼠日", desc: "北美土拨鼠日" },
        "4-22": { name: "地球日", desc: "世界地球日" },
        "10-31": { name: "万圣节前夜", desc: "西方万圣节前夜" },
        "11-11": { name: "双十一", desc: "光棍节/购物节" },
        "11-23": { name: "感恩节", desc: "美国感恩节（每年11月第四个星期四）" },
        "12-24": { name: "平安夜", desc: "平安夜" },
        "12-25": { name: "圣诞节", desc: "圣诞节" }

        // 国际节日

    };

    /**
     * 公历转农历（精确算法）
     * @param {number} year 公历年
     * @param {number} month 公历月 (1-12)
     * @param {number} day 公历日
     * @returns {Object} 农历信息
     */
    static solarToLunar(year, month, day) {
        // 检查年份是否在数据范围内
        if (year < 1900 || year > 2100) {
            // 如果没有数据，使用简化算法
            return this.simpleSolarToLunar(year, month, day);
        }
        
        // 基准日期：1900年1月31日（农历1900年正月初一）
        const baseDate = new Date(1900, 0, 31);
        const targetDate = new Date(year, month - 1, day);
        
        // 计算相差天数
        const diffTime = targetDate - baseDate;
        let diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
        
        // 从1900年开始计算农历日期
        let lunarYear = 1900;
        let lunarMonth = 1;
        let lunarDay = 1;
        
        // 找到目标日期所在的农历年
        while (diffDays > 0 && lunarYear <= 2100) {
            const yearDays = this.getLunarYearDays(lunarYear);
            if (diffDays >= yearDays) {
                diffDays -= yearDays;
                lunarYear++;
            } else {
                break;
            }
        }
        
        // 获取目标年份的农历数据
        const monthDays = this.LUNAR_DATA[lunarYear];
        if (!monthDays) {
            // 如果没有数据，使用简化算法
            return this.simpleSolarToLunar(year, month, day);
        }
        
        let leapMonth = monthDays[0]; // 闰月月份
        
        // 找到目标日期所在的农历月
        for (let i = 1; i <= 12; i++) {
            const daysInMonth = monthDays[i];
            if (diffDays < daysInMonth) {
                lunarMonth = i;
                lunarDay = diffDays + 1;
                break;
            }
            diffDays -= daysInMonth;
            
            // 检查闰月
            if (leapMonth > 0 && i === leapMonth) {
                const leapDays = monthDays[leapMonth];
                if (diffDays < leapDays) {
                    lunarMonth = leapMonth;
                    lunarDay = diffDays + 1;
                    // 标记为闰月
                    leapMonth = -leapMonth; // 用负数表示闰月
                    break;
                }
                diffDays -= leapDays;
            }
        }
        
        // 判断是否为闰月
        const isLeapMonth = leapMonth < 0;
        if (isLeapMonth) {
            lunarMonth = -leapMonth; // 恢复正确的月份
        }
        
        // 正确计算生肖和干支（基于60年循环）
        // 使用已知的参考年份：2025年是乙巳年（蛇年）
        // 2025年对应的天干索引是1（乙），地支索引是5（巳）
        const referenceYear = 2025;
        const referenceStemIndex = 1; // 乙
        const referenceBranchIndex = 5; // 巳
        
        const stemIndex = (referenceStemIndex + (year - referenceYear) + 10) % 10;
        const branchIndex = (referenceBranchIndex + (year - referenceYear) + 12) % 12;
        
        return {
            lunarYear: lunarYear,
            lunarMonth: lunarMonth,
            lunarDay: lunarDay,
            isLeapMonth: isLeapMonth,
            zodiac: this.ZODIAC_ANIMALS[branchIndex],
            heavenlyStem: this.HEAVENLY_STEMS[stemIndex],
            earthlyBranch: this.EARTHLY_BRANCHES[branchIndex],
            lunarMonthName: this.LUNAR_MONTH_NAMES[lunarMonth],
            lunarDayName: this.LUNAR_DAY_NAMES[lunarDay],
            isLeap: isLeapMonth
        };
    }

    /**
     * 简化版公历转农历（用于没有数据的年份）
     * @param {number} year 公历年
     * @param {number} month 公历月 (1-12)
     * @param {number} day 公历日
     * @returns {Object} 农历信息
     */
    static simpleSolarToLunar(year, month, day) {
        // 使用更合理的近似算法计算农历
        
        // 计算农历年份（近似）
        let lunarYear = year;
        // 简化的农历月份和日期计算
        let lunarMonth = month;
        let lunarDay = day;
        const isLeapMonth = false;
        
        // 根据月份调整年份和月份
        if (month < 2) {
            lunarYear = year - 1;
            lunarMonth = month + 12;
        }
        
        // 简化的日期调整
        if (day > 29) {
            lunarDay = day - 29;
            lunarMonth++;
            if (lunarMonth > 12) {
                lunarMonth = 1;
                lunarYear++;
            }
        }
        
        // 确保月份在有效范围内
        if (lunarMonth > 12) {
            lunarMonth = 12;
        }
        if (lunarMonth < 1) {
            lunarMonth = 1;
        }
        
        // 确保日期在有效范围内
        if (lunarDay > 30) {
            lunarDay = 30;
        }
        if (lunarDay < 1) {
            lunarDay = 1;
        }
        
        // 正确计算生肖和干支（基于60年循环）
        // 使用已知的参考年份：2025年是乙巳年（蛇年）
        // 2025年对应的天干索引是1（乙），地支索引是5（巳）
        const referenceYear = 2025;
        const referenceStemIndex = 1; // 乙
        const referenceBranchIndex = 5; // 巳
        
        const stemIndex = (referenceStemIndex + (year - referenceYear) + 10) % 10;
        const branchIndex = (referenceBranchIndex + (year - referenceYear) + 12) % 12;
        
        return {
            lunarYear: lunarYear,
            lunarMonth: lunarMonth,
            lunarDay: lunarDay,
            isLeapMonth: isLeapMonth,
            zodiac: this.ZODIAC_ANIMALS[branchIndex],
            heavenlyStem: this.HEAVENLY_STEMS[stemIndex],
            earthlyBranch: this.EARTHLY_BRANCHES[branchIndex],
            lunarMonthName: this.LUNAR_MONTH_NAMES[lunarMonth] || '未知月',
            lunarDayName: this.LUNAR_DAY_NAMES[lunarDay] || '未知日',
            isLeap: isLeapMonth
        };
    }

    /**
     * 获取农历年天数
     * @param {number} year 农历年份
     * @returns {number} 该农历年的总天数
     */
    static getLunarYearDays(year) {
        const monthDays = this.LUNAR_DATA[year];
        if (!monthDays) return 354; // 默认354天
        
        let totalDays = 0;
        for (let i = 1; i <= 12; i++) {
            totalDays += monthDays[i];
        }
        
        // 如果有闰月，加上闰月天数
        if (monthDays[0] > 0) {
            totalDays += monthDays[monthDays[0]];
        }
        
        return totalDays;
    }

    /**
     * 获取节气信息
     * @param {number} year 公历年
     * @param {number} month 公历月 (1-12)
     * @param {number} day 公历日
     * @returns {Object|null} 节气信息
     */
    static getSolarTerm(year, month, day) {
        // 更精确的节气计算需要具体的节气日期数据
        // 这里我们使用更合理的近似算法
        
        // 定义每年的节气参考日期（公历）
        const solarTermsData = {
            2020: [
                [2, 4], [2, 19], [3, 5], [3, 20], [4, 4], [4, 19],
                [5, 5], [5, 21], [6, 5], [6, 21], [7, 7], [7, 22],
                [8, 7], [8, 23], [9, 7], [9, 23], [10, 8], [10, 23],
                [11, 7], [11, 22], [12, 7], [12, 21], [1, 5], [1, 20]
            ],
            2021: [
                [2, 3], [2, 18], [3, 5], [3, 20], [4, 4], [4, 20],
                [5, 5], [5, 21], [6, 5], [6, 21], [7, 7], [7, 22],
                [8, 7], [8, 23], [9, 7], [9, 23], [10, 8], [10, 23],
                [11, 7], [11, 22], [12, 7], [12, 21], [1, 5], [1, 20]
            ],
            2022: [
                [2, 4], [2, 19], [3, 5], [3, 21], [4, 5], [4, 20],
                [5, 5], [5, 21], [6, 6], [6, 21], [7, 7], [7, 23],
                [8, 7], [8, 23], [9, 8], [9, 23], [10, 8], [10, 24],
                [11, 8], [11, 22], [12, 7], [12, 22], [1, 5], [1, 20]
            ],
            2023: [
                [2, 4], [2, 19], [3, 6], [3, 21], [4, 5], [4, 20],
                [5, 6], [5, 21], [6, 6], [6, 21], [7, 7], [7, 23],
                [8, 8], [8, 23], [9, 8], [9, 23], [10, 8], [10, 24],
                [11, 8], [11, 22], [12, 7], [12, 22], [1, 6], [1, 20]
            ],
            2024: [
                [2, 4], [2, 19], [3, 5], [3, 20], [4, 4], [4, 19],
                [5, 5], [5, 20], [6, 5], [6, 21], [7, 6], [7, 22],
                [8, 7], [8, 22], [9, 7], [9, 22], [10, 8], [10, 23],
                [11, 7], [11, 22], [12, 6], [12, 21], [1, 5], [1, 20]
            ],
            2025: [
                [2, 4], [2, 18], [3, 5], [3, 20], [4, 4], [4, 19],
                [5, 5], [5, 21], [6, 5], [6, 21], [7, 7], [7, 22],
                [8, 7], [8, 23], [9, 7], [9, 23], [10, 8], [10, 23],
                [11, 7], [11, 22], [12, 7], [12, 21], [1, 5], [1, 20]
            ]
        };
        
        // 获取指定年份的节气数据，如果没有则使用默认数据
        const termsData = solarTermsData[year] || this.SOLAR_TERMS;
        
        // 检查指定日期是否为节气日
        for (let i = 0; i < termsData.length; i++) {
            const [termMonth, termDay] = termsData[i];
            if (termMonth === month && termDay === day) {
                return {
                    name: this.SOLAR_TERM_NAMES[i],
                    date: `${termMonth}月${termDay}日`
                };
            }
        }
        
        // 检查指定日期是否接近节气日（前后1天内）
        for (let i = 0; i < termsData.length; i++) {
            const [termMonth, termDay] = termsData[i];
            if (termMonth === month && Math.abs(termDay - day) <= 1) {
                return {
                    name: this.SOLAR_TERM_NAMES[i],
                    date: `${termMonth}月${termDay}日`
                };
            }
        }
        
        return null;
    }

    /**
     * 获取黄帝纪年
     * @param {number} year 公历年
     * @returns {number} 黄帝纪年
     */
    static getHuangdiYear(year) {
        // 黄帝纪年 = 公元年 + 2697年
        return year + 2697;
    }

    /**
     * 获取农历节日信息
     * @param {number} lunarMonth 农历月份
     * @param {number} lunarDay 农历日期
     * @returns {Object|null} 节日信息
     */
    static getLunarFestival(lunarMonth, lunarDay) {
        const key = `${lunarMonth}-${lunarDay}`;
        return this.LUNAR_FESTIVALS[key] || null;
    }

    /**
     * 获取公历节日信息
     * @param {number} month 公历月份
     * @param {number} day 公历日期
     * @returns {Object|null} 节日信息
     */
    static getSolarFestival(month, day) {
        const key = `${month}-${day}`;
        return this.SOLAR_FESTIVALS[key] || null;
    }
}

// 导出类（如果在模块环境中）
if (typeof module !== 'undefined' && module.exports) {
    module.exports = LunarCalendar;
}

// 添加测试代码（仅在开发环境中使用）
if (typeof window !== 'undefined' && typeof console !== 'undefined') {
    // 测试2025年是否为乙巳蛇年
    const testResult2025 = LunarCalendar.solarToLunar(2025, 1, 1);
    console.log('2025年测试结果:', testResult2025);
    console.log('天干地支:', testResult2025.heavenlyStem + testResult2025.earthlyBranch);
    console.log('生肖:', testResult2025.zodiac);
    
    // 测试2024年（应该是甲辰龙年）
    const testResult2024 = LunarCalendar.solarToLunar(2024, 1, 1);
    console.log('2024年测试结果:', testResult2024);
    console.log('天干地支:', testResult2024.heavenlyStem + testResult2024.earthlyBranch);
    console.log('生肖:', testResult2024.zodiac);
    
    // 测试2026年（应该是丙午马年）
    const testResult2026 = LunarCalendar.solarToLunar(2026, 1, 1);
    console.log('2026年测试结果:', testResult2026);
    console.log('天干地支:', testResult2026.heavenlyStem + testResult2026.earthlyBranch);
    console.log('生肖:', testResult2026.zodiac);
}